from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime, timedelta
from database import get_supabase_client
from auth import get_password_hash, verify_password, create_access_token

app = FastAPI(title="PPL Backend API")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "https://your-frontend-domain.vercel.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Get Supabase client
supabase = get_supabase_client()

# Pydantic models
class UserRegister(BaseModel):
    email: EmailStr
    password: str
    name: str

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    id: str
    email: str
    name: str
    created_at: str

class AuthResponse(BaseModel):
    message: str
    user: UserResponse
    token: str

@app.get("/")
async def root():
    return {"message": "Welcome to PPL Backend API"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

@app.post("/api/register", response_model=AuthResponse, status_code=status.HTTP_201_CREATED)
async def register(user_data: UserRegister):
    """Register a new user"""
    try:
        # Check if user already exists
        existing_user = supabase.table("users").select("*").eq("email", user_data.email).execute()
        
        if existing_user.data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email already registered"
            )
        
        # Hash the password
        password_hash = get_password_hash(user_data.password)
        
        # Insert user into database
        new_user = supabase.table("users").insert({
            "email": user_data.email,
            "name": user_data.name,
            "password_hash": password_hash
        }).execute()
        
        if not new_user.data:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to create user"
            )
        
        user = new_user.data[0]
        
        # Create JWT token
        access_token = create_access_token(
            data={"sub": user["email"], "user_id": str(user["id"])}
        )
        
        user_response = UserResponse(
            id=str(user["id"]),
            email=user["email"],
            name=user["name"],
            created_at=user["created_at"]
        )
        
        return AuthResponse(
            message="User registered successfully",
            user=user_response,
            token=access_token
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An error occurred: {str(e)}"
        )

@app.post("/api/login", response_model=AuthResponse)
async def login(credentials: UserLogin):
    """Login user"""
    try:
        # Get user from database
        user_query = supabase.table("users").select("*").eq("email", credentials.email).execute()
        
        if not user_query.data:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid email or password"
            )
        
        user = user_query.data[0]
        
        # Verify password
        if not verify_password(credentials.password, user["password_hash"]):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid email or password"
            )
        
        # Create JWT token
        access_token = create_access_token(
            data={"sub": user["email"], "user_id": str(user["id"])}
        )
        
        user_response = UserResponse(
            id=str(user["id"]),
            email=user["email"],
            name=user["name"],
            created_at=user["created_at"]
        )
        
        return AuthResponse(
            message="Login successful",
            user=user_response,
            token=access_token
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An error occurred: {str(e)}"
        )
